@using Frontend.Models
@using System.Text
@using Frontend.Services
@inject ISnackbar snackbar
@inject ScopedStore scopedStore

@if(Photo!= null)
{
    <MudCard Elevation=4>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">@Photo?.Description?.FirstOrDefault()</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1"></MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <span class="d-flex justify-end">
                    <MudIconButton 
                        Icon="@Icons.Material.Filled.Settings"
                        Color="Color.Default"
                        OnClick="ImageConfiguration"/>
                </span>
            </CardHeaderActions>
        </MudCardHeader>

        @if(@Photo?.Image == null )
        {
            <span class="d-flex justify-center align-center align-stretch" Style="height:200px;">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="height:70px;width:70px;" />
            </span>
        }
        else
        {
            <MudCardMedia 
                Image="@($"data:image/png;base64,{Convert.ToBase64String(Photo?.Image!)}")"
                Height="200" />
        }
        <MudCardContent>
            <MudText Typo="Typo.body2">@Photo?.Description</MudText>
            <span class="d-flex justify-end py-2 px-1 mt-6">
                <MudChip 
                    Icon="@Icons.Material.Filled.EditCalendar"
                    IconColor="Color.Error">@Photo?.Date.ToString("dd/MM/yyyy HH:mm:ss")</MudChip>
            </span>
        </MudCardContent>
        <MudCardActions>
            <MudButton 
                Variant="Variant.Text" 
                Color="Color.Primary" 
                EndIcon="@Icons.Filled.Comment" 
                OnClick="NavigateToPhotoComment">Comment</MudButton>
        </MudCardActions>
    </MudCard>   
}

@code {
    [Parameter, EditorRequired]
    public Photo Photo { get; set; } = null!;
    [Parameter]
    public EventCallback<Guid> NavigateToPhotoCommentEvent { get; set; }

    protected override void OnInitialized()
    {
        scopedStore.PhotoSelected = Photo;
    }

    public void NavigateToPhotoComment()
    {
        NavigateToPhotoCommentEvent.InvokeAsync(Photo.Id);
    }

    public void ImageConfiguration()
    {
        snackbar.Add("Configuration is coming", Severity.Info, (s) => s.RequireInteraction = true);
    }
}
